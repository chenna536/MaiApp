{"ast":null,"code":"var _jsxFileName = \"/home/chenna/parentOf/cards/src/CircularProgressBar.jsx\";\nimport React, { Component } from 'react';\nimport './CircularProgress.css'; // import { CircularProgressbar } from 'react-circular-progressbar';  \n\n/* .circle-progress {\n    fill: #f1f1f1;\n}\n.circle-background {\n  stroke: #f1f1f1;\n}\n\n.circle-progress {\n  stroke: green;\n}\n.circle-text {\n  font-size: 1.2em;\n  font-weight: bold;\n  fill: black;\n} */\n\nclass CircularProgressBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    // Size of the enclosing square\n    const sqSize = this.props.sqSize; // SVG centers the stroke width on the radius, subtract out so circle fits in square\n\n    const radius = (this.props.sqSize - this.props.strokeWidth) / 2; // Enclose cicle in a circumscribing square\n\n    const viewBox = \"0 0 \".concat(sqSize, \" \").concat(sqSize); // Arc length at 100% coverage is the circle circumference\n\n    const dashArray = radius * Math.PI * 2; // Scale 100% coverage overlay with the actual percent\n\n    const dashOffset = dashArray - dashArray * this.props.percentage / 100;\n    return React.createElement(\"svg\", {\n      width: this.props.sqSize,\n      height: this.props.sqSize,\n      viewBox: viewBox,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"circle-background\",\n      cx: this.props.sqSize / 2,\n      cy: this.props.sqSize / 2,\n      r: radius,\n      strokeWidth: \"\".concat(this.props.strokeWidth, \"px\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"circle-progress\",\n      cx: this.props.sqSize / 2,\n      cy: this.props.sqSize / 2,\n      r: radius,\n      strokeWidth: \"\".concat(this.props.strokeWidth, \"px\") // Start progress marker at 12 O'Clock\n      ,\n      transform: \"rotate(-90 \".concat(this.props.sqSize / 2, \" \").concat(this.props.sqSize / 2, \")\"),\n      style: {\n        strokeDasharray: dashArray,\n        strokeDashoffset: dashOffset\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"text\", {\n      className: \"circle-text\",\n      x: \"50%\",\n      y: \"50%\",\n      dy: \".3em\",\n      textAnchor: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"\".concat(this.props.percentage, \"%\")));\n  }\n\n}\n\nCircularProgressBar.defaultProps = {\n  sqSize: 100,\n  percentage: 25,\n  strokeWidth: 10\n};\nexport default CircularProgressBar; //   class App extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         percentage: 25\n//       };\n//       this.handleChangeEvent = this.handleChangeEvent.bind(this);\n//     }\n//     handleChangeEvent(event) {\n//       this.setState({\n//         percentage: event.target.value\n//       });\n//     }\n//     render() {\n//       return (\n//         <div>\n//             <CircularProgressBar\n//               strokeWidth=\"10\"\n//               sqSize=\"150\"\n//               percentage={this.state.percentage}/>\n//             <div>\n//               <input \n//                 id=\"progressInput\" \n//                 type=\"range\" \n//                 min=\"0\" \n//                 max=\"100\" \n//                 step=\"1\"\n//                 value={this.state.percentage}\n//                 onChange={this.handleChangeEvent}/>\n//             </div>\n//           </div>\n//       );\n//     }\n//   }","map":{"version":3,"sources":["/home/chenna/parentOf/cards/src/CircularProgressBar.jsx"],"names":["React","Component","CircularProgressBar","constructor","props","state","render","sqSize","radius","strokeWidth","viewBox","dashArray","Math","PI","dashOffset","percentage","strokeDasharray","strokeDashoffset","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,wBAAP,C,CACA;;AAEA;;;;;;;;;;;;;;;;AAgBA,MAAMC,mBAAN,SAAkCD,SAAlC,CAA4C;AACxCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,UAAMC,MAAM,GAAG,KAAKH,KAAL,CAAWG,MAA1B,CAFO,CAGP;;AACA,UAAMC,MAAM,GAAG,CAAC,KAAKJ,KAAL,CAAWG,MAAX,GAAoB,KAAKH,KAAL,CAAWK,WAAhC,IAA+C,CAA9D,CAJO,CAKP;;AACA,UAAMC,OAAO,iBAAUH,MAAV,cAAoBA,MAApB,CAAb,CANO,CAOP;;AACA,UAAMI,SAAS,GAAGH,MAAM,GAAGI,IAAI,CAACC,EAAd,GAAmB,CAArC,CARO,CASP;;AACA,UAAMC,UAAU,GAAGH,SAAS,GAAGA,SAAS,GAAG,KAAKP,KAAL,CAAWW,UAAvB,GAAoC,GAAnE;AAEA,WACE;AACI,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWG,MADtB;AAEI,MAAA,MAAM,EAAE,KAAKH,KAAL,CAAWG,MAFvB;AAGI,MAAA,OAAO,EAAEG,OAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAEE,MAAA,SAAS,EAAC,mBAFZ;AAGE,MAAA,EAAE,EAAE,KAAKN,KAAL,CAAWG,MAAX,GAAoB,CAH1B;AAIE,MAAA,EAAE,EAAE,KAAKH,KAAL,CAAWG,MAAX,GAAoB,CAJ1B;AAKE,MAAA,CAAC,EAAEC,MALL;AAME,MAAA,WAAW,YAAK,KAAKJ,KAAL,CAAWK,WAAhB,OANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAWI;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,EAAE,EAAE,KAAKL,KAAL,CAAWG,MAAX,GAAoB,CAF1B;AAGE,MAAA,EAAE,EAAE,KAAKH,KAAL,CAAWG,MAAX,GAAoB,CAH1B;AAIE,MAAA,CAAC,EAAEC,MAJL;AAKE,MAAA,WAAW,YAAK,KAAKJ,KAAL,CAAWK,WAAhB,OALb,CAME;AANF;AAOE,MAAA,SAAS,uBAAgB,KAAKL,KAAL,CAAWG,MAAX,GAAoB,CAApC,cAAyC,KAAKH,KAAL,CAAWG,MAAX,GAAoB,CAA7D,MAPX;AAQE,MAAA,KAAK,EAAE;AACLS,QAAAA,eAAe,EAAEL,SADZ;AAELM,QAAAA,gBAAgB,EAAEH;AAFb,OART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAuBI;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,CAAC,EAAC,KAFJ;AAGE,MAAA,CAAC,EAAC,KAHJ;AAIE,MAAA,EAAE,EAAC,MAJL;AAKE,MAAA,UAAU,EAAC,QALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAMM,KAAKV,KAAL,CAAWW,UANjB,OAvBJ,CADF;AAkCD;;AApDuC;;AAuD1Cb,mBAAmB,CAACgB,YAApB,GAAmC;AACjCX,EAAAA,MAAM,EAAE,GADyB;AAEjCQ,EAAAA,UAAU,EAAE,EAFqB;AAGjCN,EAAAA,WAAW,EAAE;AAHoB,CAAnC;AAMF,eAAeP,mBAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react'\nimport './CircularProgress.css';\n// import { CircularProgressbar } from 'react-circular-progressbar';  \n\n/* .circle-progress {\n    fill: #f1f1f1;\n}\n.circle-background {\n  stroke: #f1f1f1;\n}\n\n.circle-progress {\n  stroke: green;\n}\n.circle-text {\n  font-size: 1.2em;\n  font-weight: bold;\n  fill: black;\n} */\n\nclass CircularProgressBar extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {};\n    }\n  \n    render() {\n      // Size of the enclosing square\n      const sqSize = this.props.sqSize;\n      // SVG centers the stroke width on the radius, subtract out so circle fits in square\n      const radius = (this.props.sqSize - this.props.strokeWidth) / 2;\n      // Enclose cicle in a circumscribing square\n      const viewBox = `0 0 ${sqSize} ${sqSize}`;\n      // Arc length at 100% coverage is the circle circumference\n      const dashArray = radius * Math.PI * 2;\n      // Scale 100% coverage overlay with the actual percent\n      const dashOffset = dashArray - dashArray * this.props.percentage / 100;\n  \n      return (\n        <svg\n            width={this.props.sqSize}\n            height={this.props.sqSize}\n            viewBox={viewBox}>\n            <circle\n                \n              className=\"circle-background\"\n              cx={this.props.sqSize / 2}\n              cy={this.props.sqSize / 2}\n              r={radius}\n              strokeWidth={`${this.props.strokeWidth}px`} />\n            <circle\n              className=\"circle-progress\"\n              cx={this.props.sqSize / 2}\n              cy={this.props.sqSize / 2}\n              r={radius}\n              strokeWidth={`${this.props.strokeWidth}px`}\n              // Start progress marker at 12 O'Clock\n              transform={`rotate(-90 ${this.props.sqSize / 2} ${this.props.sqSize / 2})`}\n              style={{\n                strokeDasharray: dashArray,\n                strokeDashoffset: dashOffset\n              }} />\n            <text\n              className=\"circle-text\"\n              x=\"50%\"\n              y=\"50%\"\n              dy=\".3em\"\n              textAnchor=\"middle\">\n              {`${this.props.percentage}%`}\n            </text>\n        </svg>\n      );\n    }\n  }\n  \n  CircularProgressBar.defaultProps = {\n    sqSize: 100,\n    percentage: 25,\n    strokeWidth: 10\n  };\n\nexport default CircularProgressBar;\n  \n//   class App extends React.Component {\n//     constructor(props) {\n//       super(props);\n  \n//       this.state = {\n//         percentage: 25\n//       };\n  \n//       this.handleChangeEvent = this.handleChangeEvent.bind(this);\n//     }\n  \n//     handleChangeEvent(event) {\n//       this.setState({\n//         percentage: event.target.value\n//       });\n//     }\n  \n//     render() {\n//       return (\n//         <div>\n//             <CircularProgressBar\n//               strokeWidth=\"10\"\n//               sqSize=\"150\"\n//               percentage={this.state.percentage}/>\n//             <div>\n//               <input \n//                 id=\"progressInput\" \n//                 type=\"range\" \n//                 min=\"0\" \n//                 max=\"100\" \n//                 step=\"1\"\n//                 value={this.state.percentage}\n//                 onChange={this.handleChangeEvent}/>\n//             </div>\n//           </div>\n//       );\n//     }\n//   }\n"]},"metadata":{},"sourceType":"module"}