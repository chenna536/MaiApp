{"ast":null,"code":"import _defineProperty from \"/home/chenna/parentOf/cards/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst axios = require('axios');\n\nconst access_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkNTExOGYzZmJlNjI5MzE0OTc0Y2EwYiIsImlhdCI6MTU2NTU5NjAwOX0.kwgnPc0jcqGL3RBw8MOmI2eZTaRnuCqy1NmIAPsXZAY';\nexport default async function fetchData(URL) {\n  let result = {\n    data: [],\n    status: \"INIT\"\n  };\n  result.status = \"LOADING\";\n  await axios.get(URL, {\n    headers: {\n      'Content-Type': 'application/json',\n      'x-access-token': access_token\n    }\n  }).then(res => {\n    if (!res.ok) throw Error(res.statusText);\n    return res;\n  }).then(data => {\n    return data.map(e => _objectSpread({}, e, {\n      hour: new Date(e.time).toLocaleTimeString([], {\n        hour: '2-digit'\n      })\n    }));\n  }).then(data => {\n    result.data = data;\n    result.status = \"SUCCESS\";\n    return result;\n  }).catch(error => {\n    console.log('error :', error);\n    result.status = \"ERROR\";\n    return result;\n  });\n  return result;\n}","map":{"version":3,"sources":["/home/chenna/parentOf/cards/src/fetchCall.js"],"names":["axios","require","access_token","fetchData","URL","result","data","status","get","headers","then","res","ok","Error","statusText","map","e","hour","Date","time","toLocaleTimeString","catch","error","console","log"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,YAAY,GAAG,sJAArB;AACA,eAAe,eAAeC,SAAf,CAAyBC,GAAzB,EAA8B;AACzC,MAAIC,MAAM,GAAC;AAACC,IAAAA,IAAI,EAAC,EAAN;AAASC,IAAAA,MAAM,EAAC;AAAhB,GAAX;AACAF,EAAAA,MAAM,CAACE,MAAP,GAAc,SAAd;AACA,QAAMP,KAAK,CAACQ,GAAN,CAAUJ,GAAV,EAAc;AAChBK,IAAAA,OAAO,EAAE;AACA,sBAAgB,kBADhB;AAEA,wBAAkBP;AAFlB;AADO,GAAd,EAKFQ,IALE,CAKGC,GAAG,IAAI;AACR,QAAI,CAACA,GAAG,CAACC,EAAT,EAAa,MAAMC,KAAK,CAACF,GAAG,CAACG,UAAL,CAAX;AACb,WAAOH,GAAP;AACH,GARC,EASDD,IATC,CASKJ,IAAD,IAAU;AAAE,WAAOA,IAAI,CAACS,GAAL,CAASC,CAAC,sBAAUA,CAAV;AAAaC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASF,CAAC,CAACG,IAAX,EAAiBC,kBAAjB,CAAoC,EAApC,EAAwC;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAxC;AAAnB,MAAV,CAAP;AAAuG,GATvH,EAUDP,IAVC,CAUIJ,IAAI,IAAI;AACVD,IAAAA,MAAM,CAACC,IAAP,GAAcA,IAAd;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,SAAhB;AACA,WAAOF,MAAP;AACH,GAdC,EAeDgB,KAfC,CAeKC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB;AACAjB,IAAAA,MAAM,CAACE,MAAP,GAAc,OAAd;AACA,WAAOF,MAAP;AACH,GAnBC,CAAN;AAoBI,SAAOA,MAAP;AACP","sourcesContent":["const axios = require('axios');\nconst access_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkNTExOGYzZmJlNjI5MzE0OTc0Y2EwYiIsImlhdCI6MTU2NTU5NjAwOX0.kwgnPc0jcqGL3RBw8MOmI2eZTaRnuCqy1NmIAPsXZAY';\nexport default async function fetchData(URL) {\n    let result={data:[],status:\"INIT\"}\n    result.status=\"LOADING\";\n    await axios.get(URL,{\n        headers: {\n                 'Content-Type': 'application/json',\n                 'x-access-token': access_token,\n                }\n     }).then(res => {\n            if (!res.ok) throw Error(res.statusText)\n            return res;\n        })\n        .then((data) => { return data.map(e => ({ ...e, hour: new Date(e.time).toLocaleTimeString([], { hour: '2-digit' }) })); })\n        .then(data => {\n            result.data = data;\n            result.status = \"SUCCESS\";\n            return result\n        })\n        .catch(error => {\n            console.log('error :', error);\n            result.status=\"ERROR\";\n            return result\n        })\n        return result\n}"]},"metadata":{},"sourceType":"module"}